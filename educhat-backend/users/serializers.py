from rest_framework import serializers
from .models import CustomUser, UserRole

# Serializer for user registration.
class UserRegistrationSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, required=True, style={'input_type': 'password'}) # Input only, not for response
    password_confirm = serializers.CharField(write_only=True, required=True, style={'input_type': 'password'}) # For password confirmation

    class Meta:
        model = CustomUser
        # Fields to include in serialization/deserialization for registration.
        fields = ['user_id', 'email', 'full_name', 'password', 'password_confirm', 'role', 'profile_picture_url']
        extra_kwargs = {
            'user_id': {'read_only': True}, # user_id is generated by the model, not provided by client
            'profile_picture_url': {'required': False, 'allow_null': True} # Profile picture is optional
        }

    # Validates the input data.
    def validate(self, attrs):
        if attrs['password'] != attrs['password_confirm']:
            raise serializers.ValidationError({"password": "Password fields didn't match."})
        if len(attrs['password']) < 8: # Basic password complexity check
             raise serializers.ValidationError({"password": "Password must be at least 8 characters long."})
        return attrs

    # Handles creation of a new CustomUser instance after validation.
    def create(self, validated_data):
        validated_data.pop('password_confirm') # Remove confirmation field before creating user
        # Uses Django's create_user method to handle password hashing.
        user = CustomUser.objects.create_user(
            username=validated_data['email'], # Using email as the username field for Django's auth system
            email=validated_data['email'],
            password=validated_data['password'],
            full_name=validated_data.get('full_name', ''),
            role=validated_data.get('role', UserRole.STUDENT),
            profile_picture_url=validated_data.get('profile_picture_url')
        )
        return user

# General purpose serializer for CustomUser model, used for retrieving user details.
class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = CustomUser
        # Fields to include when serializing user data for responses.
        fields = ['user_id', 'email', 'full_name', 'role', 'profile_picture_url', 'last_login', 'date_joined']
        read_only_fields = ['user_id', 'email', 'last_login', 'date_joined'] # These fields are typically not editable via API directly
